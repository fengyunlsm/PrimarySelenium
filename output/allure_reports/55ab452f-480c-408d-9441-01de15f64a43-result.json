{"name": "test_add_cart", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'del_home_delivery_good_button' in section: 'home'", "trace": "self = <configparser.ConfigParser object at 0x03CE8A30>, section = 'home', option = 'del_home_delivery_good_button'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\nD:\\python\\lib\\configparser.py:789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ChainMap({}, {'cart_button': 'css^.header-right >a:nth-child(4)'}, {}), key = 'del_home_delivery_good_button'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\nD:\\python\\lib\\collections\\__init__.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ChainMap({}, {'cart_button': 'css^.header-right >a:nth-child(4)'}, {}), key = 'del_home_delivery_good_button'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'del_home_delivery_good_button'\n\nD:\\python\\lib\\collections\\__init__.py:890: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <PrimarySelenium.case.shoppingcart.test_shopping_cart.TestShoppingCartCase object at 0x03D73BB0>\ninit_cart = (<base.basepage.SeleniumDriver object at 0x03D4FA60>, <bussiness.shoppingcart_bussiness.ShoppingCartBussiness object a...ss.login_bussiness.LoginBussiness object at 0x03D4F598>, <bussiness.home_bussiness.HomeBussiness object at 0x03D4F400>)\n\n    @pytest.mark.cart\n    @pytest.mark.usefixtures(\"init_cart\")\n    def test_add_cart(self, init_cart):\n        init_driver = init_cart[0]\n        cart = init_cart[1]\n        login = init_cart[2]\n        home = init_cart[3]\n        # 先登录\n        init_driver.set_node(\"login\")\n        login.login_eshop(\"13544989573\", \"6329017abc\")\n        # 先将 电商商品3 19 19g添加到购物车\n        # 进入到购物车\n        init_driver.set_node(\"home\")\n        home.enter_cart()\n>       cart.del_without_check()\n\ncase\\shoppingcart\\test_shopping_cart.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbussiness\\shoppingcart_bussiness.py:15: in del_without_check\n    self.cart.click_del_home_delivery_good_button()\npage\\shoppingcart_page.py:25: in click_del_home_delivery_good_button\n    self.fd.click_element(\"del_home_delivery_good_button\", \"购物车页面_删除电商商品\")\nbase\\basepage.py:352: in click_element\n    element = self.get_element(info, img_doc)\nbase\\basepage.py:186: in get_element\n    by, value = self.read_ini(info)\nbase\\basepage.py:408: in read_ini\n    data = read_ini.get_value(self.node, info)\nutil\\read_ini.py:14: in get_value\n    return self.data.get(type, key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x03CE8A30>, section = 'home', option = 'del_home_delivery_good_button'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'del_home_delivery_good_button' in section: 'home'\n\nD:\\python\\lib\\configparser.py:792: NoOptionError"}, "attachments": [{"name": "log", "source": "1c2e0502-6982-4fcb-9d29-d80e4eae82a6-attachment.txt", "type": "text/plain"}], "start": 1597506043907, "stop": 1597506045364, "uuid": "c5d15804-1e87-4e3a-ac84-dcb09a911184", "historyId": "e8452fc06cde9ae2e22835e1862d32ea", "testCaseId": "9a806e7436729cfa6860530d263f6701", "fullName": "case.shoppingcart.test_shopping_cart.TestShoppingCartCase#test_add_cart", "labels": [{"name": "tag", "value": "cart"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_cart')"}, {"name": "parentSuite", "value": "case.shoppingcart"}, {"name": "suite", "value": "test_shopping_cart"}, {"name": "subSuite", "value": "TestShoppingCartCase"}, {"name": "host", "value": "FYYX-2019VXOSDQ"}, {"name": "thread", "value": "21700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.shoppingcart.test_shopping_cart"}]}