{"name": "test_add_cart", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'login_phone_children' in section: 'shoppingcart'", "trace": "self = <configparser.ConfigParser object at 0x03D77B80>, section = 'shoppingcart', option = 'login_phone_children'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\nD:\\python\\lib\\configparser.py:789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ChainMap({}, {'empty_cart_button': 'css^.left > span:nth-child(2)', 'batch_remove_button': 'css^.left > span:nth-child...utton': 'css^.ivu-modal-confirm-footer>.ivu-modal-confirm-footer', 'good': 'xpath^//p[contains(text(), \"电商商品3\")]'}, {})\nkey = 'login_phone_children'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\nD:\\python\\lib\\collections\\__init__.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ChainMap({}, {'empty_cart_button': 'css^.left > span:nth-child(2)', 'batch_remove_button': 'css^.left > span:nth-child...utton': 'css^.ivu-modal-confirm-footer>.ivu-modal-confirm-footer', 'good': 'xpath^//p[contains(text(), \"电商商品3\")]'}, {})\nkey = 'login_phone_children'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'login_phone_children'\n\nD:\\python\\lib\\collections\\__init__.py:890: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <PrimarySelenium.case.shoppingcart.test_shopping_cart.TestShoppingCartCase object at 0x03E02118>\ninit_cart = (<base.basepage.SeleniumDriver object at 0x03DEA7C0>, <bussiness.shoppingcart_bussiness.ShoppingCartBussiness object a...68>, <bussiness.login_bussiness.LoginBussiness object at 0x03DEAB38>, <class 'bussiness.home_bussiness.HomeBussiness'>)\n\n    @pytest.mark.cart\n    @pytest.mark.usefixtures(\"init_cart\")\n    def test_add_cart(self, init_cart):\n    \n        login = init_cart[2]\n        home = init_cart[3]\n        # 先登录\n>       login.login_eshop(\"13544989573\", \"6329017abc\")\n\ncase\\shoppingcart\\test_shopping_cart.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbussiness\\login_bussiness.py:13: in login_eshop\n    self.login.login(phone, password)\npage\\login_page.py:12: in login\n    phone_element = self.fd.find_level_element('login_phone_parent', 'login_phone_children', \"登录页面_查找手机号输入框\", 1, 0)\nbase\\basepage.py:264: in find_level_element\n    child_by, child_value = self.read_ini(child_node)\nbase\\basepage.py:408: in read_ini\n    data = read_ini.get_value(self.node, info)\nutil\\read_ini.py:14: in get_value\n    return self.data.get(type, key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x03D77B80>, section = 'shoppingcart', option = 'login_phone_children'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'login_phone_children' in section: 'shoppingcart'\n\nD:\\python\\lib\\configparser.py:792: NoOptionError"}, "attachments": [{"name": "log", "source": "d68b7a91-f87d-4edd-add2-87b33b860221-attachment.txt", "type": "text/plain"}], "start": 1597505354748, "stop": 1597505354749, "uuid": "b1863936-ea6f-45a4-8551-30f9ad026df9", "historyId": "e8452fc06cde9ae2e22835e1862d32ea", "testCaseId": "9a806e7436729cfa6860530d263f6701", "fullName": "case.shoppingcart.test_shopping_cart.TestShoppingCartCase#test_add_cart", "labels": [{"name": "tag", "value": "cart"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_cart')"}, {"name": "parentSuite", "value": "case.shoppingcart"}, {"name": "suite", "value": "test_shopping_cart"}, {"name": "subSuite", "value": "TestShoppingCartCase"}, {"name": "host", "value": "FYYX-2019VXOSDQ"}, {"name": "thread", "value": "15864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.shoppingcart.test_shopping_cart"}]}