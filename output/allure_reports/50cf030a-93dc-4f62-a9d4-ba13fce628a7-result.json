{"name": "test_total_price", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'total' in section: 'shoppingcart'", "trace": "self = <configparser.ConfigParser object at 0x03897598>, section = 'shoppingcart', option = 'total'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\nD:\\python\\lib\\configparser.py:789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ChainMap({}, {'empty_cart_button': 'css^.left > span:nth-child(2)', 'batch_remove_button': 'css^.left > span:nth-child...\"]', 'subtotal': 'xpath^//p[contains(text(), \"18号商品 1\")]//parent::div//following-sibling::div[@class=\"count\"]//p'}, {})\nkey = 'total'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\nD:\\python\\lib\\collections\\__init__.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ChainMap({}, {'empty_cart_button': 'css^.left > span:nth-child(2)', 'batch_remove_button': 'css^.left > span:nth-child...\"]', 'subtotal': 'xpath^//p[contains(text(), \"18号商品 1\")]//parent::div//following-sibling::div[@class=\"count\"]//p'}, {})\nkey = 'total'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'total'\n\nD:\\python\\lib\\collections\\__init__.py:890: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <PrimarySelenium.case.shoppingcart.test_shopping_cart.TestShoppingCartCase object at 0x03AF2D00>\ninit_cart = (<base.basepage.SeleniumDriver object at 0x03AF76B8>, <bussiness.shoppingcart_bussiness.ShoppingCartBussiness object a...ss.login_bussiness.LoginBussiness object at 0x03AF79A0>, <bussiness.home_bussiness.HomeBussiness object at 0x03AF7A90>)\n\n    @pytest.mark.cart\n    @pytest.mark.usefixtures(\"init_cart\")\n    def test_total_price(self, init_cart):\n        init_driver, cart, login, home = init_cart\n        init_driver.set_node(\"login\")\n        login.login_eshop(\"13544989573\", \"6329017abc\")\n        init_driver.set_node(\"home\")\n        time.sleep(1)\n        # 此处应该等待元素出现\n        home.enter_cart()\n        # 勾选单个电商商品，点击删除\n        init_driver.set_node(\"shoppingcart\")\n        cart.increase_good()\n        assert \"100\" in cart.check_subtotal_correct()\n>       assert \"100\" in cart.check_total_correct()\n\ncase\\shoppingcart\\test_shopping_cart.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbussiness\\shoppingcart_bussiness.py:79: in check_total_correct\n    return self.cart.get_total()\npage\\shoppingcart_page.py:64: in get_total\n    return self.fd.get_element(\"total\", \"购物车页_查看总计计算正确\").get_attribute(\"textContent\")\nbase\\basepage.py:186: in get_element\n    by, value = self.read_ini(info)\nbase\\basepage.py:408: in read_ini\n    data = read_ini.get_value(self.node, info)\nutil\\read_ini.py:14: in get_value\n    return self.data.get(options, key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x03897598>, section = 'shoppingcart', option = 'total'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'total' in section: 'shoppingcart'\n\nD:\\python\\lib\\configparser.py:792: NoOptionError"}, "attachments": [{"name": "log", "source": "f46d9ee2-a231-4bb4-9720-5242f50ab898-attachment.txt", "type": "text/plain"}], "start": 1597565081753, "stop": 1597565085578, "uuid": "ccf2326b-0eab-47fc-ae6b-b2c47142b72d", "historyId": "b334497117cb4a90087cd818380dbcd9", "testCaseId": "4dcd8103966dcaa6a98b07a5f156e5f3", "fullName": "case.shoppingcart.test_shopping_cart.TestShoppingCartCase#test_total_price", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_cart')"}, {"name": "tag", "value": "cart"}, {"name": "parentSuite", "value": "case.shoppingcart"}, {"name": "suite", "value": "test_shopping_cart"}, {"name": "subSuite", "value": "TestShoppingCartCase"}, {"name": "host", "value": "FYYX-2019VXOSDQ"}, {"name": "thread", "value": "12612-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.shoppingcart.test_shopping_cart"}]}